import copy
from random import shuffle, randint     # Números pseudoaleatorios
from itertools import product           # Producto cartesiano

laberinto = [["#","E","#","#","#"],
             ["#"," ","#"," ","#"],
             ["#"," "," "," ","#"],
             ["#"," ","#"," ","S"],
             ["#","#","#","#","#"]]

def buscar_E(matriz):
    for l in range(len(matriz)):
        for e in range(len(matriz[l])):
            if matriz[l][e] == "E":
                return [l, e]

coordenada_inicial = buscar_E(laberinto)
fila = int(coordenada_inicial[0])
columna = int(coordenada_inicial[1])
copia = copy.deepcopy(laberinto)

def matriz_binaria(matriz):
    for l in range(len(matriz)):
        for e in range(len(matriz[l])):
            if matriz[l][e] == "E":
                matriz[l][e] = 3
            elif matriz[l][e] == " ":
                matriz[l][e] = 0
            elif matriz[l][e] == "#":
                matriz[l][e] = 1
            elif matriz[l][e] == "S":
                matriz[l][e] = 5
    return matriz

nueva_matriz = matriz_binaria(copia)

def recorrido(nm, i, j):
    if nm[i][j] == 5:
        return [[i, j]]
    if nm[i][j] == 1:
        return []
    nm[i][j] = 2


def laberinto(m, n):
    def vecinos(i, j):                  # Conjunto de celdas aledañas a (i, j)
        if 0 < i: yield i - 1, j
        if i < m - 1: yield i + 1, j
        if 0 < j: yield i, j - 1
        if j < n - 1: yield i, j + 1

    def visitar(i, j):
        X.add((i, j))                   # Marcar celda actual como visitada
        N = list(vecinos(i, j)); shuffle(N)  # Desordenar celdas vecinas
        for h, k in N:                  # Para cada celda vecina
            if (h, k) in X: continue    # ...que no haya sido visitada:
            A[i + h + 1][j + k + 1] = ' '  # Tumbar el muro que las separa
            visitar(h, k)               # Visitar vecina recursivamente

    A = [['#']*(2*n + 1) for i in range(2*m + 1)]  # Tablero
    for i, j in product(range(1, 2*m + 1, 2), range(1, 2*n + 1, 2)):
        A[i][j] = ' '                   # Poner celdas blancas
    X = set()                           # Conjunto de celdas visitadas
    visitar(randint(0, m - 1), randint(0, n - 1))  # Inicio en celda aleatoria
    A[1][0] = "E"
    A[-2][-1] = "S"
    return A

fil = int(input("ingrese numero de filas: "))
col = int(input("ingrese numero de columnas: "))
nlab = laberinto(fil, col)

print(('\n'.join(''.join(i) for i in nlab)))
print(" ")

coordenada_inicial = buscar_E(nlab)
fila = int(coordenada_inicial[0])
columna = int(coordenada_inicial[1])
copia = copy.deepcopy(nlab)
nueva_matriz = matriz_binaria(copia)
solucion = recorrido(nueva_matriz, fila, columna)
matriz_resuelta = reemplazar_matriz(nlab, solucion)

print(('\n'.join(''.join(i) for i in matriz_resuelta)))
